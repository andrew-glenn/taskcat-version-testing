# taskcat ci config version v2
#  Python Versions
#  Python: 3.5
#  Python: 3.6
#
#  Create development builds (Triggered by commit to develop branch)
#  - Builds pypi package to https://test.pypi.org/project/taskcat/
#  - Tags development builds
#
dist: xenial
language: python

branches:
  only:
  - master

python:
- 3.5
- 3.6

before_install:
- pip install bump2version

#
# install:
# - python setup.py install
#
# before_script:
# - pytest

script:
- echo "Finish Unittests"
jobs:
  include:
  # - stage: "Functional test"
  #   name: "taskcat (sample-taskcat-project/ci/taskcat-autobucket.yml)"
  #   if: branch =~ /(release.*|develop|master)/ AND commit_message !~ /(Bump)/ AND type = push
  #   before_script:
  #   script:
  #   - cd examples && pwd
  #   - mkdir ~/.aws/ &&  cp sample-taskcat-project/ci/taskcat_global_override.json  ~/.aws/taskcat_global_override.json
  #   - taskcat -c sample-taskcat-project/ci/taskcat-autobucket.yml -A $AKEY -S $SKEY && export MERGE_TO_MASTER=true

  - stage: "[Ver Bump] Check/Create Release PR"
    name: "[Ver Bump] Check/Create Release PR"
    if: branch = master AND commit_message !~ /(Bump)/
    before_script:
      - |
        pip install bump2version
        HUB_DIST=linux-amd64
        HUB_VERSION=$(curl -w "%{url_effective}\n" -I -L -s -S github.com/github/hub/releases/latest -o /dev/null | awk -F'releases/tag/v' '{ print $2 }')
        curl "https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-${HUB_DIST}-${HUB_VERSION}.tgz" -L | tar xvz && sudo ./hub-${HUB_DIST}-${HUB_VERSION}/install && rm -r ./hub-${HUB_DIST}-${HUB_VERSION}
    script:
      - export RELEASE_ID=$(cut -f1-2 -d . VERSION)
      - export ORIGINAL_VERSION=$(cat VERSION)
      - git checkout "release/v${RELEASE_ID}" ||  git checkout -b "release/v${RELEASE_ID}"
      - git pull
      - bumpversion --no-commit --allow-dirty --no-tag patch
      - bumpversion --commit --allow-dirty --no-tag release --message "Bump Version - Creating a new minor version"
      - export NEW_VERSION=$(cat VERSION)
      - git push "https://${GHT}:@github.com/${TRAVIS_REPO_SLUG}" "release/v${RELEASE_ID}"
      - |
        OPEN_PR=$(hub pr list -s open --base master --head "release/v${RELEASE_ID}" -L 1 -f "%I")
        if [ -z ${OPEN_PR} ]; then
          echo 'Opening a new PR!'
          hub pull-request -m "Release taskcat [${NEW_VERSION}]"  -h "release/v${RELEASE_ID}"
        fi
    after_script:
      - echo "Complete!"

  - stage: "[Ver Bump] Create PyPI Development release"
    name: "[Ver Bump] Create PyPI Development release"
    if: branch = master AND commit_message !~ /(Bump)/
    before_script:
      - export TEST_PYPI_VERSION=$(python -c "import requests; version = requests.get('https://test.pypi.org/pypi/taskcat/json').json()['info']['version'];print(version)")
      - export TEST_PYPI_RELEASE_ID=$(echo ${TEST_PYPI_VERSION} | cut -f1-2 -d .)
      - export RELEASE_ID=$(cut -f1-2 -d . VERSION)
    script:
      - |
        if [[ "${RELEASE_ID}" != "${TEST_PYPI_RELEASE_ID}" ]]; then
          export TEST_PYPI_NEW_VERSION="$(cat VERSION)-dev0-${TRAVIS_COMMIT:0:8}"
        else
          BUMPVERSION_STUB=$(bumpversion --dry-run --current-version ${TEST_PYPI_VERSION} build --list | egrep -i 'new_version' | sed -e 's/new_version=//g')
          export TEST_PYPI_NEW_VERSION="${BUMPVERSION_STUB}-${TRAVIS_COMMIT:0:8}"
        fi
      - echo "${TEST_PYPI_NEW_VERSION}" > VERSION
    # deploy:
    #   - provider: pypi
    #     user: $PYPI_USER
    #     password: $PYPI_PASSWORD
    #     server: https://test.pypi.org/legacy/
    #     if: fork = false
    #     on:
    #       branch: master
    # after_deploy:
    #   - echo "Deployment complete"

  # DOCUMENTATION JOB GOES HERE
  # - stage: "Build documentation"
  #   name: "build documentation"

  - stage: "Tag next release & include changelog"
    name: "Tag next release & include changelog"
    if: branch = master AND commit_message =~ /(Bump)/ AND sender == travis-ci
    script:
      - |
        LAST_RELEASE_COMMIT=$(git rev-list --tags --max-count=1)
        TAG_BODY=$(git --no-pager log --no-merges --oneline ${LAST_RELEASE_COMMIT}..HEAD  --pretty='- %h %s')
        git tag -a "$(cat VERSION)" -m "${TAG_BODY}"
        git push --tags "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
    deploy:
      - provider: releases
        skip_cleanup: true
        api_key: "$GHT"
        file: directory/*
        on:
          branch: master

  - stage: "Build Production PyPI and Production Docker"
    name: "Build Production PyPI and Production Docker"
    if: branch = master AND commit_message =~ /(Bump)/ AND sender == travis-ci
    script:
      - |
        LAST_RELEASE_COMMIT=$(git rev-list --tags --max-count=1)
        TAG_BODY=$(git --no-pager log --no-merges --oneline ${LAST_RELEASE_COMMIT}..HEAD  --pretty='- %h %s')
        git tag -a "$(cat VERSION)" -m "${TAG_BODY}"
        git push --tags "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
    # deploy:
    #   - provider: pypi
    #     user: $PYPI_USER
    #     password: $PYPI_PASSWORD
    #     on:
    #       branch: master
