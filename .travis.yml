# taskcat ci config version v2
#  Python Versions
#  Python: 3.5
#  Python: 3.6
#
#  Create development builds (Triggered by commit to develop branch)
#  - Builds pypi package to https://test.pypi.org/project/taskcat/
#  - Tags development builds
#
dist: xenial
language: python

branches:
  only:
  - master
  - develop
  - /^release.*$/

python:
- 3.5
- 3.6

before_install:
- pip install bump2version

install:
- python setup.py install

before_script:
- pytest

script:
- echo "Finish Unittests"

jobs:
  include:
  - stage: "Merge to Release Branch "
    name: "stage to release branch"
    if: branch = develop AND commit_message =~ /(Bump)/ AND type = push
    before_script:
    - export RELEASE_ID=$(cat VERSION)
    - echo "TRAVIS_BRANCH = $TRAVIS_BRANCH  TRAVIS_TAG = $TRAVIS_TAG RELEASE = $RELEASE_ID "
    - git config --global user.email "builds@travis-ci.com"
    - git config --global user.name "Travis CI"
    - git config --global push.followTags true
    script:
    - echo "releasing ..."
    - export RELEASE_ID=$(cat VERSION)
    - GIT_FULL_CHECHOUT=$(mktemp -d)
    - git clone "https://github.com/$TRAVIS_REPO_SLUG" "$GIT_FULL_CHECHOUT" && cd "$GIT_FULL_CHECHOUT"
    - git fetch --all
    - git checkout "release/v${RELEASE_ID}" ||  git checkout -b "release/v${RELEASE_ID}"
    - git merge --no-edit "$TRAVIS_COMMIT"
    - git push "https://$GHT:@github.com/$TRAVIS_REPO_SLUG" "release/v${RELEASE_ID}"

  # - stage: "Functional test"
  #   name: "taskcat (sample-taskcat-project/ci/taskcat-autobucket.yml)"
  #   if: branch =~ /(release.*|develop|master)/ AND commit_message !~ /(Bump)/ AND type = push
  #   before_script:
  #   script:
  #   - cd examples && pwd
  #   - mkdir ~/.aws/ &&  cp sample-taskcat-project/ci/taskcat_global_override.json  ~/.aws/taskcat_global_override.json
  #   - taskcat -c sample-taskcat-project/ci/taskcat-autobucket.yml -A $AKEY -S $SKEY && export MERGE_TO_MASTER=true

  - stage: "Pull Request to Release → Master"
    name: "generate pull request"
    if: branch =~ /(release.*)/ AND type = push
    before_install:
    - |
      HUB_DIST=linux-amd64
      HUB_VERSION=$(curl -w "%{url_effective}\n" -I -L -s -S github.com/github/hub/releases/latest -o /dev/null | awk -F'releases/tag/v' '{ print $2 }')
      curl "https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-${HUB_DIST}-${HUB_VERSION}.tgz" -L | tar xvz && sudo ./hub-${HUB_DIST}-${HUB_VERSION}/install && rm -r ./hub-${HUB_DIST}-${HUB_VERSION}
    script:
    - export RELEASE_ID=$(cut -f 1-2 -d . VERSION)
    - GIT_FULL_CHECHOUT=$(mktemp -d)
    - git clone "https://github.com/$TRAVIS_REPO_SLUG" "$GIT_FULL_CHECHOUT" && cd "$GIT_FULL_CHECHOUT"
    - git fetch --all
    - git checkout master
    - LAST_RELEASE_COMMIT=$(git rev-list --max-count=1 HEAD)
    - TAG_BODY=$(git --no-pager log --no-merges --oneline $LAST_RELEASE_COMMIT..HEAD  --pretty='- %h %s')
    - git checkout "release/v${RELEASE_ID}" ||  git checkout -b "release/v${RELEASE_ID}"
    - |
      egrep --quiet -i "\-dev" VERSION
      if [[ $? -eq 0 ]]; then
        # 0.1.2-dev0 -> 0.1.2
        bumpversion release --allow-dirty
      else
        # 0.1.1 -> 0.1.2
        bumpversion patch --allow-dirty
      fi
    - export NEW_VERSION=$(cat VERSION)
    - git fetch --tags
    - |
      if [ $(git tag -l "$NEW_VERSION") ]; then
        git tag --delete  $NEW_VERSION
        git push --delete origin $NEW_VERSION
      else
          echo "No Tags to Purge"
      fi
    - git tag -a "${NEW_VERSION}" -m "${TAG_BODY}"
    - git push --tags "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
    - mkdir -p ~/.config/taskcat
    - |
      cat > ~/.config/hub << EOL
      github.com:
      - user: taskcat-ci
        oauth_token: $GHT
        protocol: https
      EOL
    - |
      OPEN_PR=$(hub pr list -s open --base master --head "release/v${RELEASE_ID}" -L 1 -f "%I")
      if [ ${OPEN_PR} ]; then
        hub api -XPOST repos/${TRAVIS_REPO_SLUG}/issues/${OPEN_PR}/comments -f body="Aggregating in release." >/dev/null
        hub api -XPATCH repos/${TRAVIS_REPO_SLUG}/issues/${OPEN_PR} -f state=closed >/dev/null
      fi
    - hub pull-request  -m "Release taskcat [$NEW_VERSION]"  -h "release/v${RELEASE_ID}"

  - stage: "Create Development Builds"
    name: "build new develop version of pip module"
    if: branch = develop AND commit_message !~ /(Bump)/ AND type = push
    before_script:
    - export RELEASE_ID=$(cat VERSION)
    - export RELEASE_ID=$(grep version setup.py | awk -F= '{print $2}'dd | cut -f1-2 -d.|tr -d "'|\""| tr -d "," |xargs)
    - echo "TRAVIS_BRANCH = $TRAVIS_BRANCH  TRAVIS_TAG = $TRAVIS_TAG RELEASE = $RELEASE_ID "
    - git config --global user.email "builds@travis-ci.com"
    - git config --global user.name "Travis CI"
    - git config --global push.followTags true
    script:
    - |
      if [[ "$TRAVIS_PULL_REQUEST" == "false" ]]; then
        echo "Creating new development ${RELEASE_ID}"
        git checkout $TRAVIS_BRANCH
        export COMMIT_MSG="$(git log -1 --pretty=%B| xargs)"
        if [[ $COMMIT_MSG == Bump* ]]; then
          echo "skipping ..."
        else
          echo "bumping version ..."
          egrep --quiet -i "\-dev" VERSION
          if [[ $? -eq 0 ]]; then
            # 0.1.2-dev0 -> 0.1.2-dev1
            bumpversion build --allow-dirty --no-tag
          else
            # 0.1.1 -> 0.1.2-dev0
            bumpversion patch --allow-dirty --no-tag
          fi
          git push "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
        fi
        export NEW_VERSION=$(cat VERSION)
        TAG_BODY="Build Version → $NEW_VERSION"
      else
        echo "TRAVIS_PULL_REQUEST = $TRAVIS_PULL_REQUEST"
      fi
    deploy:
    - provider: pypi
      user: $PYPI_USER
      password: $PYPI_PASSWORD
      server: https://test.pypi.org/legacy/
      if: fork = false
      on:
        branch: develop
    after_deploy:
    - echo "Deployment complete"

  # - stage: "Create Production Builds"
  #   name: "build new production version (pip and docker)"
  #   before_script:
  #   - export RELEASE_ID=$(grep version setup.py  | awk -F= '{print $2}' | cut -f1-2 -d.|tr -d "'|\""| tr -d "," |xargs)
  #   - echo "TRAVIS_BRANCH = $TRAVIS_BRANCH  TRAVIS_TAG = $TRAVIS_TAG RELEASE = $RELEASE_ID "
  #   - git config --global user.email "builds@travis-ci.com"
  #   - git config --global user.name "Travis CI"
  #   - git config --global push.followTags true
  #   - git fetch --all
  #   if: branch = master AND type = push AND fork = false
  #   before_deploy:
  #   - python setup.py clean --all
  #   script:
  #   - |
  #     if [[ $TRAVIS_PULL_REQUEST == "false" ]]; then
  #       echo "Creating production release ${RELEASE_ID}"
  #       git checkout $TRAVIS_BRANCH
  #       export NEW_VERSION="$(cat setup.py |grep version | awk -F"=|," '{print $2}' |sed -e s/\'//g |sed -e 's/ //g')"
  #       TAG_BODY="taskcat version → $NEW_VERSION"
  #       git fetch --tags
  #       git tag -l |grep $NEW_VERSION | xargs git tag -d && git push --tags -f
  #       git tag -a "${NEW_VERSION}" -m "${TAG_BODY}"
  #       git push --tags  -f "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
  #     fi
  #   deploy:
  #   - provider: releases
  #     skip_cleanup: true
  #     api_key: "$GHT"
  #     file: directory/*
  #     on:
  #       branch: master
  #   - provider: pypi
  #     user: $PYPI_USER
  #     password: $PYPI_PASSWORD
  #     on:
  #       branch: master
